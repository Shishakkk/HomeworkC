#include <iostream>
using namespace std;


int** transponMatrix(int** matrix, int size_X, int size_Y) {

    int** result = new int* [size_Y];
    for (int i = 0; i < size_Y; ++i) {
        result[i] = new int[size_X];
    }

    
    for (int i = 0; i < size_X; ++i) {
        for (int j = 0; j < size_Y; ++j) {
            result[j][i] = matrix[i][j]; 
        }
    }

    return result;
}


void printMatrix(int** matrix, int size_X, int size_Y) {
    for (int i = 0; i < size_X; ++i) {
        for (int j = 0; j < size_Y; ++j) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }
}


int** getRandomMatrix(int size_X, int size_Y) {
    int** matrix = new int* [size_X];

    for (int i = 0; i < size_X; ++i) {
        matrix[i] = new int[size_Y];

        for (int j = 0; j < size_Y; ++j) {
            matrix[i][j] = rand() % 10; 
        }
    }

    return matrix;
}

int main() {
    setlocale(LC_ALL, "Russian");
    srand(time(nullptr));

    int size_X = 3;
    int size_Y = 3;

    int** matrix = getRandomMatrix(size_X, size_Y);
    cout << "Исходная матрица:" << endl;
    printMatrix(matrix, size_X, size_Y);

    int** transposed_matrix = transponMatrix(matrix, size_X, size_Y);
    cout << "\nТранспонированная матрица:" << endl;
    printMatrix(transposed_matrix, size_Y, size_X);  


    for (int i = 0; i < size_X; ++i) {
        delete[] matrix[i];
    }
    delete[] matrix;

  
    for (int i = 0; i < size_Y; ++i) {
        delete[] transposed_matrix[i];
    }
    delete[] transposed_matrix;

    return 0;
}
